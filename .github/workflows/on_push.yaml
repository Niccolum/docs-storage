name: ci

on:
  push:
    branches:
      - "main"

jobs:
  run_pre_commit:
    runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pip install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"

      - name: Install requirements
        run: poetry install

      - name: Run linters and formatters
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files

  run_tests:
    runs-on: [ubuntu-latest]
    needs: [run_pre_commit]

    env:
      ENVIRONMENT: "dev"

    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: user
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: db
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: |
          pip install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"

      - name: Install requirements
        run: poetry install

      - name: create secret envfile
        run: |
          env_file=env/${{env.ENVIRONMENT}}/.secret.env
          touch env_file
          echo SECURITY_CSRF_SECRET_TOKEN="${{ secrets.SECURITY_CSRF_SECRET_TOKEN }}" >> env_file
          echo SECURITY_AES_KEY=${{ secrets.SECURITY_AES_KEY }} >> env_file

      - name: Run tests
        run: poetry run pytest

  deploy_to_dockerhub:
    runs-on: [ubuntu-latest]
    needs: [run_tests]

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: niccolum
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Create tag in github
        id: tags
        uses: phish108/autotag-action@v1.1.64
        with:
          github-token: ${{ secrets.GITHUB_TOKEN}}

      - name: Extract tags for Docker
        id: docker_meta
        uses: docker/metadata-action@v5.5.0
        with:
          images: niccolum/docs-storage
          tags: |
            type=pep440,pattern=v{{major}},enable={{is_default_branch}},value=${{ steps.tags.outputs.new-tag }}
            type=pep440,pattern={{version}},enable={{is_default_branch}},value=${{ steps.tags.outputs.new-tag }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          file: docker/backend_Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
