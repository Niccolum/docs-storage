[tool.ruff]
ignore = [
    # ANN102 Missing type annotation for `cls` in classmethod
    "ANN102",
    # D100 Missing docstring in public module
    # D101 Missing docstring in public class
    # D102 Missing docstring in public method
    # D103 Missing docstring in public function
    # D104 Missing docstring in public package
    # D105 Missing docstring in magic method
    # D106 Missing docstring in public nested class
    # D107 Missing docstring in __init__
    "D1",
    # D211 No blank lines allowed before class docstring
    "D211",
    # D212 Multi-line docstring summary should start at the first line
    "D212",
    # G004 Logging statement uses f-string
    "G004",
    # N818 exception name should be named with an Error suffix. Remove later
    "N818",
    # R502 do not implicitly return None in function able to return non-None value.
    "RET502",
    # R503 missing explicit return at the end of function able to return non-None value.
    "RET503",
    # R504 unnecessary variable assignment before return statement.
    "RET504",
    # SIM117 Merge with-statements that use the same scope
    "SIM117",
]
exclude = [".venv", ".git", "__pycache__"]
line-length = 120
select = ["ALL"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401", "F403"]
"**/tests/**.py" = ["ANN201", "S101", "ANN401"]

[tool.bandit]
exclude_dirs = [".venv", "tests"]


[tool.isort]
profile = "black"
line_length = 50
known_first_party = ["backend"]
multi_line_output = 3
include_trailing_comma = true
force_alphabetical_sort_within_sections = true
lines_after_imports = 2

[tool.black]
line-length = 120
target-version = ['py311']

[tool.mypy]
ignore_missing_imports = true
follow_imports = "skip"
warn_return_any = true
cache_dir = "/dev/null"
show_column_numbers = true
show_error_codes = true
pretty = true

[tool.pytest.ini_options]
addopts = "--cov-report term --reverse"
norecursedirs = "src/frontend"
python_paths = "src"
# asyncio_mode = "auto"  # enable it after pytest-asyncio >= 0.17.0 (not released yet)

report_passed = "âœ”"
report_xpassed = "X"
report_failed = "ðŸ’©"
report_xfailed = "x"
report_skipped = "?"
report_error = "ðŸ”¥"

report_passed_verbose = "OH YEAH"
report_xpassed_verbose = "WHAT IN TARNATION?"
report_failed_verbose = "OH CRAP"
report_xfailed_verbose = "YEAH WHATEVER"
report_skipped_verbose = "DON'T CARE"
report_error_verbose = "YOU MEDDLING KIDS!"

[tool.licensecheck]
using = "poetry"
format = "simple"

[tool.codespell]
skip = "poetry.lock,pyproject.toml"
# add more local paths with custom dictionary separate by comma
dictionary = "-"
# all possible dictionaries
builtin = "clear,rare,informal,usage,code,names,en-GB_to_en-US"


[tool.poetry]
name = "docs storage"
version = "0.1.0"
description = ""
authors = ["Niccolum <lastsal@mail.ru>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Niccolum"
repository = "https://github.com/Niccolum/docs-storage"
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Topic :: Home Automation",
]

[tool.poetry.dependencies]
python = "^3.11"
gunicorn = "^20.1.0"
uvicorn = { extras = ["standart"], version = "^0.22.0" }
single-source = "^0.3.0"
fastapi = "^0.95.1"
httpx = "^0.24.0"
starlette-csrf = "^2.0.0"
Secweb = "^1.6.0"
pydantic = {extras = ["dotenv"], version = "^1.10.7"}

[tool.poetry.dev-dependencies]
flake8 = "^6.0.0"
bandit = "^1.7.5"
pre-commit = "^3.3.1"

pytest = "^7.3.1"
pytest-cov = "^4.0.0"
pytest-custom-report = "^1.0.1"
pytest-reverse = "^1.5.0"
pytest-lazy-fixture = "^0.6.3"
pytest-nice-parametrize = "^1.0.1"
pytest-asyncio = "^0.21.0"
codespell = "^2.2.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
